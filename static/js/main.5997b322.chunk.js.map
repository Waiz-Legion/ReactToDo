{"version":3,"sources":["CreateTask.js","EditTask.js","Card.js","TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["CreateTaskPopup","modal","toggle","save","useState","taskName","setTaskName","description","setDescription","handleChange","e","target","name","value","Modal","isOpen","ModalHeader","ModalBody","className","type","maxlength","placeholder","onChange","rows","ModalFooter","Button","color","onClick","preventDefault","taskObj","EditTaskPopup","updateTask","useEffect","Name","tempObj","Card","index","deleteTask","updateListArray","setModal","colors","primaryColor","secondaryColor","class","style","Description","EditTask","obj","TodoList","taskList","setTaskList","arr","localStorage","getItem","JSON","parse","tempList","splice","setItem","stringify","window","location","reload","map","CreateTask","push","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAoDeA,EAjDS,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,KACrC,EAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KAEMC,EAAe,SAACC,GAElB,MAAsBA,EAAEC,OAAjBC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,MAED,aAATD,EACCN,EAAYO,GAEZL,EAAeK,IAevB,OACI,eAACC,EAAA,EAAD,CAAOC,OAAQd,EAAOC,OAAQA,EAA9B,UACI,cAACc,EAAA,EAAD,CAAad,OAAQA,EAArB,yBACA,eAACe,EAAA,EAAD,WAEQ,sBAAKC,UAAY,aAAjB,UACI,8CACA,uBAAOC,KAAK,OAAOC,UAAY,KAAKC,YAAc,oBAAoBH,UAAY,eAAeL,MAASR,EAAUiB,SAAYb,EAAcG,KAAO,gBAEzJ,sBAAKM,UAAY,aAAjB,UACI,gDACA,0BAAUE,UAAY,KAAKC,YAAc,oBAAoBE,KAAO,IAAIL,UAAY,eAAeL,MAASN,EAAae,SAAYb,EAAcG,KAAO,sBAItK,eAACY,EAAA,EAAD,WACA,cAACC,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAzBb,SAACjB,GAChBA,EAAEkB,iBACF,IAAIC,EAAU,GACdA,EAAO,KAAWxB,EAClBwB,EAAO,YAAkBtB,EACzBJ,EAAK0B,IAoBD,oBAA6D,IAC7D,cAACJ,EAAA,EAAD,CAAQC,MAAM,YAAYC,QAASzB,EAAnC,2BCWG4B,EAtDO,SAAC,GAA0C,IAAzC7B,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,OAAQ6B,EAAyB,EAAzBA,WAAYF,EAAa,EAAbA,QAC/C,EAAgCzB,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KAEMC,EAAe,SAACC,GAElB,MAAsBA,EAAEC,OAAjBC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,MAED,aAATD,EACCN,EAAYO,GAEZL,EAAeK,IAMvBmB,qBAAU,WACN1B,EAAYuB,EAAQI,MACpBzB,EAAeqB,EAAQtB,eAEzB,IAUF,OACI,eAACO,EAAA,EAAD,CAAOC,OAAQd,EAAOC,OAAQA,EAA9B,UACI,cAACc,EAAA,EAAD,CAAad,OAAQA,EAArB,yBACA,eAACe,EAAA,EAAD,WAEQ,sBAAKC,UAAY,aAAjB,UACI,8CACA,uBAAOC,KAAK,OAAOC,UAAY,KAAKC,YAAc,oBAAoBH,UAAY,eAAeL,MAASR,EAAUiB,SAAYb,EAAcG,KAAO,gBAEzJ,sBAAKM,UAAY,aAAjB,UACI,gDACA,0BAAUE,UAAY,KAAKC,YAAc,oBAAoBE,KAAO,IAAIL,UAAY,eAAeL,MAASN,EAAae,SAAYb,EAAcG,KAAO,sBAItK,eAACY,EAAA,EAAD,WACA,cAACC,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAxBX,SAACjB,GAClBA,EAAEkB,iBACF,IAAIM,EAAU,GACdA,EAAO,KAAW7B,EAClB6B,EAAO,YAAkB3B,EACzBwB,EAAWG,IAmBP,oBAA+D,IAC/D,cAACT,EAAA,EAAD,CAAQC,MAAM,YAAYC,QAASzB,EAAnC,2BCQGiC,EAxDF,SAAC,GAAmD,IAAlDN,EAAiD,EAAjDA,QAASO,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,WAAYC,EAAqB,EAArBA,gBACvC,EAA0BlC,oBAAS,GAAnC,mBAAOH,EAAP,KAAcsC,EAAd,KAEMC,EAAS,CACX,CACIC,aAAe,UACfC,eAAiB,WAErB,CACID,aAAe,UACfC,eAAiB,WAErB,CACID,aAAe,UACfC,eAAiB,WAErB,CACID,aAAe,UACfC,eAAiB,WAErB,CACID,aAAe,UACfC,eAAiB,YAgBzB,OACI,sBAAKC,MAAQ,oBAAb,UACI,qBAAKA,MAAQ,WAAWC,MAAO,CAAC,mBAAoBJ,EAAOJ,EAAM,GAAGK,gBACpE,sBAAKE,MAAQ,cAAb,UACI,sBAAMA,MAAQ,cAAcC,MAAO,CAAC,mBAAoBJ,EAAOJ,EAAM,GAAGM,eAAgB,gBAAiB,OAAzG,SAAkHb,EAAQI,OAC1H,uBACA,mBAAGf,UAAY,OAAf,SAAuBW,EAAQgB,cAE/B,sBAAKD,MAAO,CAAC,SAAY,WAAY,MAAU,OAAQ,OAAW,QAAlE,UACI,mBAAGD,MAAQ,cAAcC,MAAO,CAAC,MAAUJ,EAAOJ,EAAM,GAAGK,aAAc,OAAW,WAAYd,QAAW,kBAAMY,GAAS,MAC1H,mBAAGI,MAAM,mBAAmBC,MAAS,CAAC,MAAUJ,EAAOJ,EAAM,GAAGK,aAAc,OAAW,WAAYd,QAdhG,WACjBU,EAAWD,YAgBX,cAACU,EAAD,CAAU7C,MAASA,EAAOC,OAzBf,WACXqC,GAAUtC,IAwBkC8B,WArB7B,SAACgB,GAChBT,EAAgBS,EAAKX,IAoBiDP,QAAWA,QCO1EmB,EAzDE,WACb,MAA0B5C,oBAAS,GAAnC,mBAAOH,EAAP,KAAcsC,EAAd,KACA,EAAgCnC,mBAAS,IAAzC,mBAAO6C,EAAP,KAAiBC,EAAjB,KAEAlB,qBAAU,WACN,IAAImB,EAAMC,aAAaC,QAAQ,YAE/B,GAAGF,EAAI,CACH,IAAIJ,EAAMO,KAAKC,MAAMJ,GACrBD,EAAYH,MAEjB,IAGH,IAAMV,EAAa,SAACD,GAChB,IAAIoB,EAAWP,EACfO,EAASC,OAAOrB,EAAO,GACvBgB,aAAaM,QAAQ,WAAYJ,KAAKK,UAAUH,IAChDN,EAAYM,GACZI,OAAOC,SAASC,UAGdxB,EAAkB,SAACS,EAAKX,GAC1B,IAAIoB,EAAWP,EACfO,EAASpB,GAASW,EAClBK,aAAaM,QAAQ,WAAYJ,KAAKK,UAAUH,IAChDN,EAAYM,GACZI,OAAOC,SAASC,UAgBpB,OACI,qCACI,sBAAK5C,UAAY,qBAAjB,UACI,2CACA,wBAAQA,UAAY,uBAAuBS,QAAW,kBAAMY,GAAS,IAArE,4BAEJ,qBAAKrB,UAAY,iBAAjB,SACC+B,GAAYA,EAASc,KAAI,SAAChB,EAAMX,GAAP,OAAiB,cAAC,EAAD,CAAMP,QAAWkB,EAAKX,MAASA,EAAOC,WAAcA,EAAYC,gBAAmBA,SAE9H,cAAC0B,EAAD,CAAY9D,OAtBL,WACXqC,GAAUtC,IAqBwBA,MAASA,EAAOE,KAlBrC,SAAC0B,GACd,IAAI2B,EAAWP,EACfO,EAASS,KAAKpC,GACduB,aAAaM,QAAQ,WAAYJ,KAAKK,UAAUH,IAChDN,EAAYD,GACZV,GAAS,U,YC7BF2B,MARf,WACE,OACE,qBAAKhD,UAAU,MAAf,SACE,cAAC,EAAD,OCGSiD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5997b322.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\nconst CreateTaskPopup = ({modal, toggle, save}) => {\r\n    const [taskName, setTaskName] = useState('');\r\n    const [description, setDescription] = useState('');\r\n\r\n    const handleChange = (e) => {\r\n        \r\n        const {name, value} = e.target\r\n\r\n        if(name === \"taskName\"){\r\n            setTaskName(value)\r\n        }else{\r\n            setDescription(value)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    const handleSave = (e) => {\r\n        e.preventDefault()\r\n        let taskObj = {}\r\n        taskObj[\"Name\"] = taskName\r\n        taskObj[\"Description\"] = description\r\n        save(taskObj)\r\n\r\n    }\r\n\r\n    return (\r\n        <Modal isOpen={modal} toggle={toggle}>\r\n            <ModalHeader toggle={toggle}>Create Task</ModalHeader>\r\n            <ModalBody>\r\n            \r\n                    <div className = \"form-group\">\r\n                        <label>Task Name</label>\r\n                        <input type=\"text\" maxlength = '25' placeholder = '25 words limit...' className = \"form-control\" value = {taskName} onChange = {handleChange} name = \"taskName\"/>\r\n                    </div>\r\n                    <div className = \"form-group\">\r\n                        <label>Description</label>\r\n                        <textarea maxlength = '70' placeholder = '70 words limit...' rows = \"5\" className = \"form-control\" value = {description} onChange = {handleChange} name = \"description\"></textarea>\r\n                    </div>\r\n                \r\n            </ModalBody>\r\n            <ModalFooter>\r\n            <Button color=\"primary\" onClick={handleSave}>Create</Button>{' '}\r\n            <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n            </ModalFooter>\r\n      </Modal>\r\n    );\r\n};\r\n\r\nexport default CreateTaskPopup;","import React, { useState , useEffect} from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\nconst EditTaskPopup = ({modal, toggle, updateTask, taskObj}) => {\r\n    const [taskName, setTaskName] = useState('');\r\n    const [description, setDescription] = useState('');\r\n\r\n    const handleChange = (e) => {\r\n        \r\n        const {name, value} = e.target\r\n\r\n        if(name === \"taskName\"){\r\n            setTaskName(value)\r\n        }else{\r\n            setDescription(value)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        setTaskName(taskObj.Name)\r\n        setDescription(taskObj.description)\r\n        // eslint-disable-next-line\r\n    },[])\r\n\r\n    const handleUpdate = (e) => {\r\n        e.preventDefault();\r\n        let tempObj = {}\r\n        tempObj['Name'] = taskName\r\n        tempObj['Description'] = description\r\n        updateTask(tempObj)\r\n    }\r\n\r\n    return (\r\n        <Modal isOpen={modal} toggle={toggle}>\r\n            <ModalHeader toggle={toggle}>Update Task</ModalHeader>\r\n            <ModalBody>\r\n            \r\n                    <div className = \"form-group\">\r\n                        <label>Task Name</label>\r\n                        <input type=\"text\" maxlength = '25' placeholder = '25 words limit...' className = \"form-control\" value = {taskName} onChange = {handleChange} name = \"taskName\"/>\r\n                    </div>\r\n                    <div className = \"form-group\">\r\n                        <label>Description</label>\r\n                        <textarea maxlength = '70' placeholder = '70 words limit...' rows = \"5\" className = \"form-control\" value = {description} onChange = {handleChange} name = \"description\"></textarea>\r\n                    </div>\r\n                \r\n            </ModalBody>\r\n            <ModalFooter>\r\n            <Button color=\"primary\" onClick={handleUpdate}>Update</Button>{' '}\r\n            <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n            </ModalFooter>\r\n      </Modal>\r\n    );\r\n};\r\n\r\nexport default EditTaskPopup;","import React, {useState} from 'react';\r\nimport EditTask from './EditTask'\r\n\r\nconst Card = ({taskObj, index, deleteTask, updateListArray}) => {\r\n    const [modal, setModal] = useState(false);\r\n\r\n    const colors = [\r\n        {\r\n            primaryColor : \"#5D93E1\",\r\n            secondaryColor : \"#ECF3FC\"\r\n        },\r\n        {\r\n            primaryColor : \"#ED85C9\",\r\n            secondaryColor : \"#FEFAF1\"\r\n        },\r\n        {\r\n            primaryColor : \"#5DC250\",\r\n            secondaryColor : \"#F2FAF1\"\r\n        },\r\n        {\r\n            primaryColor : \"#F48687\",\r\n            secondaryColor : \"#FDF1F1\"\r\n        },\r\n        {\r\n            primaryColor : \"#B964F7\",\r\n            secondaryColor : \"#F3F0FD\"\r\n        }\r\n    ]\r\n\r\n    const toggle = () => {\r\n        setModal(!modal);\r\n    }\r\n\r\n    const updateTask = (obj) => {\r\n        updateListArray(obj, index)\r\n    }\r\n\r\n    const handleDelete = () => {\r\n        deleteTask(index)\r\n    }\r\n\r\n    return (\r\n        <div class = \"card-wrapper mr-5\">\r\n            <div class = \"card-top\" style={{\"background-color\": colors[index%5].primaryColor}}></div>\r\n            <div class = \"task-holder\">\r\n                <span class = \"card-header\" style={{\"background-color\": colors[index%5].secondaryColor, \"border-radius\": \"5px\"}}>{taskObj.Name}</span>\r\n                <hr />\r\n                <p className = \"mt-3\">{taskObj.Description}</p>\r\n\r\n                <div style={{\"position\": \"absolute\", \"right\" : \"20px\", \"bottom\" : \"20px\"}}>\r\n                    <i class = \"far fa-edit\" style={{\"color\" : colors[index%5].primaryColor, \"cursor\" : \"pointer\"}} onClick = {() => setModal(true)}></i>\r\n                    <i class=\"fas fa-trash-alt\" style = {{\"color\" : colors[index%5].primaryColor, \"cursor\" : \"pointer\"}} onClick = {handleDelete}></i>\r\n                </div>\r\n        </div>\r\n        <EditTask modal = {modal} toggle = {toggle} updateTask = {updateTask} taskObj = {taskObj}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;","import React, {useEffect, useState} from 'react';\r\nimport CreateTask from './CreateTask'\r\nimport Card from './Card';\r\n\r\nconst TodoList = () => {\r\n    const [modal, setModal] = useState(false);\r\n    const [taskList, setTaskList] = useState([])\r\n    \r\n    useEffect(() => {\r\n        let arr = localStorage.getItem(\"taskList\")\r\n       \r\n        if(arr){\r\n            let obj = JSON.parse(arr)\r\n            setTaskList(obj)\r\n        }\r\n    }, [])\r\n\r\n\r\n    const deleteTask = (index) => {\r\n        let tempList = taskList\r\n        tempList.splice(index, 1)\r\n        localStorage.setItem(\"taskList\", JSON.stringify(tempList))\r\n        setTaskList(tempList)\r\n        window.location.reload()\r\n    }\r\n\r\n    const updateListArray = (obj, index) => {\r\n        let tempList = taskList\r\n        tempList[index] = obj\r\n        localStorage.setItem(\"taskList\", JSON.stringify(tempList))\r\n        setTaskList(tempList)\r\n        window.location.reload()\r\n    }\r\n\r\n    const toggle = () => {\r\n        setModal(!modal);\r\n    }\r\n\r\n    const saveTask = (taskObj) => {\r\n        let tempList = taskList\r\n        tempList.push(taskObj)\r\n        localStorage.setItem(\"taskList\", JSON.stringify(tempList))\r\n        setTaskList(taskList)\r\n        setModal(false)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className = \"header text-center\">\r\n                <h3>Todo List</h3>\r\n                <button className = \"btn btn-primary mt-2\" onClick = {() => setModal(true)} >Create Task</button>\r\n            </div>\r\n            <div className = \"task-container\">\r\n            {taskList && taskList.map((obj , index) => <Card taskObj = {obj} index = {index} deleteTask = {deleteTask} updateListArray = {updateListArray}/> )}\r\n            </div>\r\n            <CreateTask toggle = {toggle} modal = {modal} save = {saveTask}/>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TodoList;","//import logo from './logo.svg';\nimport './App.css';\nimport TodoList from './TodoList'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'font-awesome/css/font-awesome.min.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}